#include<iostream>
#include<cmath>
#include<algorithm>

using namespace std;

struct PositionVector{
    double x,y;

    PositionVector();
    PositionVector(double a, double b): x{a}, y{b}{};
    PositionVector(const PositionVector& vektor): x{vektor.x}, y{vektor.y}{};

    double norm();
    void print();
    
    ~PositionVector(){}

   
};
//----------
double PositionVector::norm()
{
    return sqrt(x*x + y*y);
}

void PositionVector::print()
{
	cout<<x<<" i + "<<y<<" j "<<norm()<<endl;
}
//------------

bool compare (PositionVector& A, PositionVector& B)
{
   return A.norm()>=B.norm();
}

//----------

int main()
{
    
    PositionVector P[5] {PositionVector(2.5,3.6), PositionVector(5.5,3.6), PositionVector(4.4,4.4), PositionVector(10.0,0.1),PositionVector(0.0,0.0)};
	
    for(PositionVector i : P) 
    {
    	i.print();
	}
   
   sort(&P[0] , &P[4]);

   for(PositionVector i : P) 
	{
		i.print();	
	}
   return 0;
}
