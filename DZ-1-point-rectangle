// C  D
// B  A

#include <iostream>
#define _USE_MATH_DEFINES
#include <cmath>
using namespace std;

double sqr(double x){return pow(x, 2);}

class Rectangle;

class Point{
	protected:
	double x, y;

	public:
	// pretpostavljeni konstruktor
	Point();
	// preoptereceni konstruktor
	Point(double, double);

	//getter-i
	double getx() const;
	double gety() const;

	//setter-i
	void setx(double);
	void sety(double);

	// printaj tocku
	void print() const;

	// je li tocka omedena dvama pravcima
	bool isBetween(Point, Point, char) const;

	// je li tocka unutar pravokutnika
	bool isInside(Rectangle) const;

	//"zakrece" tocku za neki stupanj
	void rotate(double);
};

// ------------------------------------------------------------------

Point::Point(){}
Point::Point(double x, double y){
	this->x = x;
	this->y = y;
}
double Point::getx() const {return x;}
double Point::gety() const {return y;}

void Point::setx(double x){this->x = x;}
void Point::sety(double y){this->y = y;}

void Point::print() const {cout << "(" << x << ", " << y << ")" << endl;}

bool Point::isBetween(Point a, Point b, char c) const {
	if (c == 'x'){
		return (a.getx() < this->getx()) && (this->getx() < b.getx());
	} else {
		return (a.gety() > this->gety()) && (this->gety() > b.gety());
	}
}

void Point::rotate(double angle){
	double x = getx();
	double y = gety();
	setx(x * cos(angle) - y * sin(angle));
	sety(x * sin(angle) + y * cos(angle));
}

// ------------------------------------------------------------------

class Rectangle{
	protected:
	Point A, B, C;

	Point D;
	void setD();

	//Point vertices [4] = {A, B, C, D};

	public:
	// preoptereceni konstruktor
	Rectangle(Point A, Point B, Point C);

	Point getA() const;
	Point getB() const;
	Point getC() const;
	
	Point getD() const;

	// duljina stranice
	double sideLength(Point, Point) const;

	// povrsina
	double area() const;
	
	// opseg
	double perimeter() const;
	
	// translatiraj za tocku
	void translate(Point);

	// rotiraj oko ishodista za kut tipa double u radijanima
	void rotate(double);

	// ispisi
	void print() const;
};

// ------------------------------------------------------------------

Rectangle::Rectangle(Point A, Point B, Point C){
	this->A = A;
	this->B = B;
	this->C = C;
	setD();
}

void Rectangle::setD(){
	double xOff = A.getx() - B.getx();
	double yOff = A.gety() - B.gety();
	D.setx(C.getx() + xOff);
	D.sety(C.gety() + yOff);
}

Point Rectangle::getA() const {return A;}
Point Rectangle::getB() const {return B;}
Point Rectangle::getC() const {return C;}
Point Rectangle::getD() const {return D;}

double Rectangle::sideLength(Point a, Point b) const {
	double a_x = a.getx();
	double a_y = a.gety();
	double b_x = b.getx();
	double b_y = b.gety();
	return (sqrt(sqr(a_x-b_x) + sqr(a_y-b_y)));
}

double Rectangle::area() const {
	return sideLength(A, B) * sideLength(B, C);
}

double Rectangle::perimeter() const {
	return 2 * (sideLength(A, B) + sideLength(B, C));
}

void Rectangle::translate(Point p){
	double xOff = p.getx();
	double yOff = p.gety();
	A.setx(A.getx() + xOff);
	A.sety(A.gety() + yOff);
	B.setx(B.getx() + xOff);
	B.sety(B.gety() + yOff);
	C.setx(C.getx() + xOff);
	C.sety(C.gety() + yOff);
	D.setx(D.getx() + xOff);
	D.sety(D.gety() + yOff);
}

void Rectangle::rotate(double angle){
	A.rotate(angle);
	B.rotate(angle);
	C.rotate(angle);
	D.rotate(angle);
}

void Rectangle::print() const {
	cout << "A: (x, y) = ";
	A.print();
	cout << "B: (x, y) = ";
	B.print();
	cout << "C: (x, y) = ";
	C.print();
	cout << "D: (x, y) = ";
	D.print();
}

// ------------------------------------------------------------------

bool Point::isInside(Rectangle r) const {
	return (isBetween(r.getC(), r.getB(), 'y') && isBetween(r.getB(), r.getA(), 'x'));
}

// ------------------------------------------------------------------

int main(){
	Point A(3, 1);
	Point B(1, 1);
	Point C(1, 2);
	Rectangle r(A, B, C);

	r.print();

	cout << "Area: " << r.area() << endl;
	cout << "Perimeter: "<< r.perimeter() << endl;

	Point p(2, 1.5);
	cout << "Point inside rectangle? - " << p.isInside(r) << endl;

	cout << "Rotate for " << M_PI << " rad" << endl;
	r.rotate(M_PI);
	r.print();

	Point q(2, 3);
	cout << "Translate for ";
	q.print();
	r.translate(q);
	r.print();
	
	cout << "Point inside rectangle? - " << p.isInside(r) << endl;

	return 0;
}
