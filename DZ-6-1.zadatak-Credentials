#include <iostream>
using namespace std;

#ifndef CREDENTIALS
#define CREDENTIALS

#include <iostream>

struct Credentials {
	std::string username, email;
	unsigned int age;
};

std::ostream& operator<<(std::ostream& os, const Credentials& c){
	os << "Username: " << c.username << "\tEmail: " << c.email << "\tAge: " << c.age << std::endl;
	return os;
}

#endif /* end of include guard: CREDENTIALS */


#ifndef QUEUE
#define QUEUE

#include <iostream>

template <typename T, size_t S>
class Queue {
public:
	T* head;
	T* tail;
	T container[S + 1];

	Queue();
	Queue(const Queue&);
	~Queue() = default;

	bool empty() const;
	bool full() const;

	// iz nekog razloga ne radi kad definiram van klase
	template <typename... Ts>
	void enqueue(Ts... args){
		if (!full()){
			addToEnd(*this, args...);
		}
	}

	T dequeue();
};

template <typename T, size_t S>
Queue<T, S>::Queue():	head{nullptr}, tail{nullptr} {
	container[S + 1];
	tail = head = container;
}

template <typename T, size_t S>
Queue<T, S>::Queue(const Queue<T, S>& q):	head{nullptr}, tail{nullptr} {
	container[S + 1];
	auto headPos = q.head - q.container;
	auto tailPos = q.tail - q.container;
	for (int i = headPos; i < tailPos; i = (i + 1 % S)){
		container[i] = q.container[i];
	}
	head = container + headPos;
	tail = container + tailPos;
}

template <typename T, size_t S>
bool Queue<T, S>::empty() const {return head == tail;}

template <typename T, size_t S>
bool Queue<T, S>::full() const {
	return tail == (container + S) ? container == head : (tail + 1) == head;
}


template <typename T, size_t S>
T Queue<T, S>::dequeue() {
	T toReturn = *head;
	head != (container + S) ? head++ : head = container;
	return toReturn;
}

template <typename T, size_t S>
void addToEnd(Queue<T, S>& q){}

template <typename T, size_t S, typename... Ts>
void addToEnd(Queue<T, S>& q, T& el, Ts... args){
	*(q.tail) = el;
	q.tail != (q.container + S) ? q.tail++ : q.tail = q.container;

	addToEnd(q, args...);
}

template <typename T, size_t S>
std::ostream& operator<<(std::ostream& os, Queue<T, S>& q){
	std::cout << "Head at: " << q.head << "; tail at: " << q.tail << std::endl;
	auto* it = q.head;
	while (it != q.tail){
		std::cout << *it;
		it == (q.container + S) ? it = q.container : it++;
	}
	return os;
}

#endif /* end of include guard: QUEUE */

string createUsername(int i){
	return "Korisnik" + to_string(i);
}

string createEmail(int i){
	return "korisnik" + to_string(i) + "@gmail.com";
}

int main(){
	const unsigned int size{10};
	Queue <Credentials, size> q;

	// q.enqueue(Credentials{"Korisnik1", "korisnik1@gmail.com", 23}, Credentials{"Korisnik2", "korisnik2@gmail.com", 24}, Credentials{"Korisnik3", "korisnik3@gmail.com", 25}, Credentials{"Korisnik4", "korisnik4@gmail.com", 26}, Credentials{"Korisnik5", "korisnik5@gmail.com", 27});

	for (int i = 1; i <= 5; i++)
		q.enqueue(Credentials{createUsername(i), createEmail(i), (i + 22)});

	cout << q << endl;

	q.dequeue();
	cout << q << endl;

	q.enqueue(Credentials{createUsername(6), createEmail(6), (6 + 22)});
	cout << q << endl;

}